{"version":3,"sources":["scripts/index.ts"],"names":[],"mappings":"AAAA;AACA,IAAM,WAAW,GAAG,QAAQ,CAAC,gBAAT,CAA0B,eAA1B,CAApB;AACA,WAAW,CAAC,OAAZ,CAAoB,UAAA,UAAA,EAAU;AAC5B,EAAA,UAAU,CAAC,gBAAX,CAA4B,OAA5B,EAAqC,UAAA,CAAA,EAAC;AACpC,IAAA,CAAC,CAAC,cAAF;AACA,QAAM,QAAQ,GAAG,CAAC,CAAC,MAAF,CAAS,MAAT,CAAjB;AACA,QAAM,MAAM,GAAG,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CAAf;AACA,IAAA,MAAM,CAAC,cAAP,CAAsB;AAAE,MAAA,QAAQ,EAAE;AAAZ,KAAtB;AACD,GALD;AAMD,CAPD,GASA;AACA;;AACA,IAAM,QAAQ,GAAG,QAAQ,CAAC,gBAAT,CAA0B,UAA1B,CAAjB;AACA,IAAM,YAAY,GAAG,QAAQ,CAAC,aAAT,CAAuB,iBAAvB,CAArB;AACA,IAAM,OAAO,GAAG;AACd,EAAA,IAAI,EAAE,YADQ;AAEd,EAAA,UAAU,EAAE,UAFE;AAGd,EAAA,SAAS,EAAE;AAHG,CAAhB;AAKA,IAAM,QAAQ,GAAG,IAAI,oBAAJ,CAAyB,eAAzB,EAA0C,OAA1C,CAAjB;AACA,QAAQ,CAAC,OAAT,CAAiB,UAAA,OAAA,EAAO;AACtB,EAAA,QAAQ,CAAC,OAAT,CAAiB,OAAjB;AACD,CAFD;AAIA;;;;;AAIA,SAAS,eAAT,CAAyB,OAAzB,EAAgC;AAC9B,EAAA,OAAO,CAAC,OAAR,CAAgB,UAAA,KAAA,EAAK;AACnB,QAAI,KAAK,CAAC,cAAV,EAA0B;AACxB,MAAA,kBAAkB,CAAC,KAAK,CAAC,MAAP,CAAlB;AACD;AACF,GAJD;AAKD;AAED;;;;;;AAIA,SAAS,kBAAT,CAA4B,OAA5B,EAAmC;AACjC,MAAM,kBAAkB,GAAG,QAAQ,CAAC,aAAT,CACzB,qBADyB,CAA3B;;AAGA,MAAI,kBAAkB,KAAK,IAA3B,EAAiC;AAC/B,IAAA,kBAAkB,CAAC,SAAnB,CAA6B,MAA7B,CAAoC,QAApC;AACD;;AACD,MAAM,cAAc,GAAG,QAAQ,CAAC,aAAT,CACrB,cAAY,OAAO,CAAC,EAApB,GAAsB,IADD,CAAvB;AAGA,EAAA,cAAc,CAAC,SAAf,CAAyB,GAAzB,CAA6B,QAA7B;AACD","file":"scripts.2ed900e3.js","sourceRoot":"../src","sourcesContent":["// スムーススクロール\nconst paginations = document.querySelectorAll(\".pagination a\");\npaginations.forEach(pagination => {\n  pagination.addEventListener(\"click\", e => {\n    e.preventDefault();\n    const targetId = e.target['hash'];\n    const target = document.querySelector(targetId);\n    target.scrollIntoView({ behavior: \"smooth\" });\n  });\n});\n\n////\n// Intersection Observer\nconst sections = document.querySelectorAll(\".section\");\nconst observerRoot = document.querySelector(\".fullPageScroll\");\nconst options = {\n  root: observerRoot,\n  rootMargin: \"-50% 0px\",\n  threshold: 0\n};\nconst observer = new IntersectionObserver(doWhenIntersect, options);\nsections.forEach(section => {\n  observer.observe(section);\n});\n\n/**\n * 交差したときに呼び出す関数\n * @param entries - IntersectionObserverEntry IntersectionObserverが交差したときに渡されるオブジェクトです。\n */\nfunction doWhenIntersect(entries) {\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      activatePagination(entry.target);\n    }\n  });\n}\n\n/**\n * ページネーションの大きさを変える関数\n * @param element - HTMLElement 現在表示中のスライドのHTML要素を引数に取ります。\n */\nfunction activatePagination(element) {\n  const currentActiveIndex = document.querySelector(\n    \"#pagination .active\"\n  );\n  if (currentActiveIndex !== null) {\n    currentActiveIndex.classList.remove(\"active\");\n  }\n  const newActiveIndex = document.querySelector(\n    `a[href='#${element.id}']`\n  );\n  newActiveIndex.classList.add(\"active\");\n}"]}